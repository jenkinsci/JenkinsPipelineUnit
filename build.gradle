import com.lesfurets.gradle.*

plugins {
    id "com.jfrog.artifactory" version "4.24.23"
    id 'groovy'
    id 'maven-publish'
    id 'java-library'
    id 'jacoco'
    id 'net.researchgate.release' version '2.8.1'
}

repositories {
  mavenCentral()
  jcenter()
}

group = "com.lesfurets"
archivesBaseName = "jenkins-pipeline-unit"

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Grape configuration is used to test @Grape annotation in unit tests
// using grapeConfig.xml
configurations {
    grape {
        // Note our simple use case does not use or support
        // transitive dependencies
        transitive = false
    }
}

dependencies {
    implementation('org.codehaus.groovy:groovy-all:2.5.15')
    implementation('com.cloudbees:groovy-cps:1.31')
    implementation('commons-io:commons-io:2.11.0')
    implementation('org.apache.ivy:ivy:2.5.0')
    api('org.assertj:assertj-core:3.21.0')
    implementation('org.apache.commons:commons-lang3:3.12.0')
    api('org.springframework:spring-core:5.3.13')

    testImplementation('junit:junit:4.13.2')

    grape('org.apache.commons:commons-math3:3.6.1')
}

defaultTasks 'test'

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from groovydoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// Copy the resolved grapes configuration to a maven2 like directory
// structure (no transitive dependencies)
task copyGrapesDependencies(type: CopyDependenciesToMavenTreeTask) {
    configuration = configurations.grape
    outputDir = "$buildDir/grapes"
}

test.dependsOn copyGrapesDependencies

test {
    inputs.files ("$projectDir/src/test/jenkins", "$projectDir/grapeConfig.xml")
    systemProperty "grape.config", "$projectDir/grapeConfig.xml"
    systemProperty "grape.home", file("$buildDir/grapes").toURI()
    // Settings for debugging @Grape() resolution in test cases
    //systemProperty "groovy.grape.report.downloads", "true"
    //systemProperty "ivy.message.logger.level", "4"

    // Enable writing stacks with -Ppipeline.stack.write
    if (project.hasProperty("pipeline.stack.write")) {
        systemProperty "pipeline.stack.write", "true"
    }

    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact tasks.sourcesJar
            artifact tasks.javadocJar
            pom {
                artifactId = "$project.archivesBaseName"
                packaging = 'jar'
                description = 'Jenkins Pipeline Unit testing framework'
                url = 'https://github.com/jenkinsci/JenkinsPipelineUnit'

                scm {
                    url =  'https://github.com/jenkinsci/JenkinsPipelineUnit'
                    connection = 'scm:git:git://github.com/jenkinsci/JenkinsPipelineUnit.git'
                    developerConnection = 'scm:git:git@github.com/jenkinsci/JenkinsPipelineUnit.git'
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'ozangunalp'
                        name = 'Ozan Gunalp'
                        email = 'ozangunalp@gmail.com'
                        url = 'https://github.com/ozangunalp'
                        organization = 'lesfurets.com'
                        organizationUrl = 'https://github.com/lesfurets'
                    }
                    developer {
                        id = 'EQuincerot'
                        name = 'Emmanuel Quincerot'
                        url = 'https://github.com/EQuincerot'
                        organization = 'lesfurets.com'
                        organizationUrl = 'https://github.com/lesfurets'
                    }
                    developer {
                        name = 'Thomas du Bo√øs'
                        url = 'https://github.com/Skool'
                        id = 'Skool'
                        organization = 'lesfurets.com'
                        organizationUrl = 'https://github.com/lesfurets'
                    }
                }
            }
        }
    }
}

artifactory {
    contextUrl = 'https://repo.jenkins-ci.org'
    publish {
        repository {
            repoKey = project.version.toString().endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'
            username = "${artifactory_user}" // The publisher user name
            password = "${artifactory_password}" // The publisher password
        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publications('maven')
            publishArtifacts = true
            // Properties to be attached to the published artifacts.
            properties = ['qa.level': 'basic', 'dev.team' : 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
}

release {
    tagTemplate='v$version' // single quotes are required
    failOnCommitNeeded = false
    failOnPublishNeeded = false
    failOnUpdateNeeded = false
}
